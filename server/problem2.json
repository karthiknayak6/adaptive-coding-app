{
  "problems": [
    {
      "id": 1,
      "title": "Find the Maximum Element",
      "description": "Given an array of integers, return the maximum element.",
      "difficulty": "Easy",
      "boilerplate": "import argparse\nimport ast\n\ndef findMaxElement(arr):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = findMaxElement(list_from_string)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [1, 2, 3, 4, 5]
          },
          "output": 5
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [-1, -2, -3, -4, -5]
          },
          "output": -1
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [100, 200, 300, 400, 500]
          },
          "output": 500
        }
      ]
    },
    {
      "id": 2,
      "title": "Sum of Elements",
      "description": "Calculate the sum of all elements in an array.",
      "difficulty": "Easy",
      "boilerplate": "import argparse\nimport ast\n\ndef sumOfElements(arr):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = sumOfElements(list_from_string)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [1, 2, 3, 4, 5]
          },
          "output": 15
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [-1, -2, -3, -4, -5]
          },
          "output": -15
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [100, 200, 300, 400, 500]
          },
          "output": 1500
        }
      ]
    },
    {
      "id": 3,
      "title": "Reverse an Array",
      "description": "Write a function that takes an array and returns a new array with the elements in reverse order.",
      "difficulty": "Easy",
      "boilerplate": "import argparse\nimport ast\n\ndef reverseArray(arr):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = reverseArray(list_from_string)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [1, 2, 3, 4, 5]
          },
          "output": [5, 4, 3, 2, 1]
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [10, 20, 30, 40, 50]
          },
          "output": [50, 40, 30, 20, 10]
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [1]
          },
          "output": [1]
        }
      ]
    },
    {
      "id": 4,
      "title": "Count Even Numbers",
      "description": "Given an array of integers, count how many of them are even.",
      "difficulty": "Easy",
      "boilerplate": "import argparse\nimport ast\n\ndef countEvenNumbers(arr):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = countEvenNumbers(list_from_string)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [1, 2, 3, 4, 5]
          },
          "output": 2
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [2, 4, 6, 8, 10]
          },
          "output": 5
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [1, 3, 5, 7, 9]
          },
          "output": 0
        }
      ]
    },
    {
      "id": 5,
      "title": "Remove Duplicates",
      "description": "Given an array, remove duplicates in place and return the new length.",
      "difficulty": "Medium",
      "boilerplate": "import argparse\nimport ast\n\ndef removeDuplicates(arr):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = removeDuplicates(list_from_string)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [1, 1, 2]
          },
          "output": 2
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]
          },
          "output": 5
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [1, 1, 1, 1]
          },
          "output": 1
        }
      ]
    },
    {
      "id": 6,
      "title": "Two Sum",
      "description": "Given an array of integers, find two numbers such that they add up to a specific target.",
      "difficulty": "Medium",
      "boilerplate": "import argparse\nimport ast\n\ndef twoSum(nums, target):\n    # Write your code here\n    pass\n\n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nparser.add_argument('arg2', help='The second argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = twoSum(list_from_string, int(args.arg2))\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "nums": [2, 7, 11, 15],
            "target": 9
          },
          "output": [0, 1]
        },
        {
          "test_case_id": 2,
          "input": {
            "nums": [3, 2, 4],
            "target": 6
          },
          "output": [1, 2]
        },
        {
          "test_case_id": 3,
          "input": {
            "nums": [8, 2, 5, 4],
            "target": 6
          },
          "output": [1, 3]
        }
      ]
    },

    {
      "id": 7,
      "title": "Rotate Array",
      "description": "Rotate an array to the right by a given number of steps.",
      "difficulty": "Medium",
      "boilerplate": "import argparse\nimport ast\n\ndef rotateArray(arr, k):\n    # Write your code here\n    k %= len(arr)\n    return arr[-k:] + arr[:-k]\n\n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', type=str, help='The first argument (array as a string)')\nparser.add_argument('arg2', type=int, help='The second argument (rotation steps)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1.replace(' ', ','))\nresult = rotateArray(list_from_string, args.arg2)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [1, 2, 3, 4, 5],
            "k": 2
          },
          "output": [4, 5, 1, 2, 3]
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [-1, -100, 3, 99],
            "k": 2
          },
          "output": [3, 99, -1, -100]
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [1, 2],
            "k": 3
          },
          "output": [2, 1]
        }
      ]
    },

    {
      "id": 8,
      "title": "Merge Sorted Arrays",
      "description": "Given two sorted arrays, merge them into one sorted array.",
      "difficulty": "Medium",
      "boilerplate": "import argparse\nimport ast\n\ndef mergeSortedArrays(arr1, arr2):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nparser.add_argument('arg2', help='The second argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string1 = ast.literal_eval(args.arg1[0].replace(' ', ','))\nlist_from_string2 = ast.literal_eval(args.arg2.replace(' ', ','))\nresult = mergeSortedArrays(list_from_string1, list_from_string2)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr1": [1, 3, 5],
            "arr2": [2, 4, 6]
          },
          "output": [1, 2, 3, 4, 5, 6]
        },
        {
          "test_case_id": 2,
          "input": {
            "arr1": [0, 9],
            "arr2": [1, 2, 3, 4]
          },
          "output": [0, 1, 2, 3, 4, 9]
        },
        {
          "test_case_id": 3,
          "input": {
            "arr1": [],
            "arr2": [1, 2, 3]
          },
          "output": [1, 2, 3]
        }
      ]
    },
    {
      "id": 9,
      "title": "Longest Consecutive Sequence",
      "description": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence.",
      "difficulty": "Hard",
      "boilerplate": "import argparse\nimport ast\n\ndef longestConsecutiveSequence(arr):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = longestConsecutiveSequence(list_from_string)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [100, 4, 200, 1, 3, 2]
          },
          "output": 4
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [0, 3, 7, 2, 5, 8, 4, 6, 0, 1]
          },
          "output": 9
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [9, 1, 4, 7, 3, -1, 0, 5, 8, -1, 6]
          },
          "output": 7
        }
      ]
    },
    {
      "id": 10,
      "title": "Product of Array Except Self",
      "description": "Given an array, return an array where each element at index i is the product of all numbers in the input array except the one at i.",
      "difficulty": "Hard",
      "boilerplate": "import argparse\nimport ast\n\ndef productExceptSelf(arr):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = productExceptSelf(list_from_string)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [1, 2, 3, 4]
          },
          "output": [24, 12, 8, 6]
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [2, 3, 4, 5]
          },
          "output": [60, 40, 30, 24]
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [1, 1, 1, 1]
          },
          "output": [1, 1, 1, 1]
        }
      ]
    },
    {
      "id": 11,
      "title": "3Sum",
      "description": "Given an array of integers, find all unique triplets that sum up to zero.",
      "difficulty": "Hard",
      "boilerplate": "import argparse\nimport ast\n\ndef threeSum(arr):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = threeSum(list_from_string)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [-1, 0, 1, 2, -1, -4]
          },
          "output": [
            [-1, -1, 2],
            [-1, 0, 1]
          ]
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [0, 0, 0, 0]
          },
          "output": [[0, 0, 0]]
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [-2, -1, 0, 1, 2]
          },
          "output": [
            [-2, 0, 2],
            [-1, 0, 1]
          ]
        }
      ]
    },
    {
      "id": 12,
      "title": "Max Product Subarray",
      "description": "Find the contiguous subarray within an array (containing at least one number) which has the largest product.",
      "difficulty": "Hard",
      "boilerplate": "import argparse\nimport ast\n\ndef maxProductSubarray(arr):\n    # Write your code here\n    \n# Don't touch the below code!!\nparser = argparse.ArgumentParser(description=\"Process any data types.\")\nparser.add_argument('arg1', nargs='+', help='The first argument (can be any type)')\nargs = parser.parse_args()\nlist_from_string = ast.literal_eval(args.arg1[0].replace(' ', ','))\nresult = maxProductSubarray(list_from_string)\nprint(result)",
      "test_cases": [
        {
          "test_case_id": 1,
          "input": {
            "arr": [2, 3, -2, 4]
          },
          "output": 6
        },
        {
          "test_case_id": 2,
          "input": {
            "arr": [-2, 0, -1]
          },
          "output": 0
        },
        {
          "test_case_id": 3,
          "input": {
            "arr": [-2, 3, -4]
          },
          "output": 24
        }
      ]
    }
  ]
}
